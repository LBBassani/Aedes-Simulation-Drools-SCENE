package br.ufes.inf.lprm.scene.examples.aedes;

import java.util.List;
import java.util.Random;

import multicast.senseup.awareness.situation.scene.model.Situation;
import multicast.senseup.awareness.situation.bindings.*;
import multicast.senseup.awareness.situation.model.BaseParticipation;
import multicast.senseup.awareness.situation.model.BaseSituationType;
import multicast.senseup.awareness.situation.scene.util.SituationHelper;

import ca.study.scenary.entities.*;


declare capturedMosquitoAndCallingAgent extends Situation
	house: House @part
	eggs: Eggs @part
end

declare capturedMosquitoSevereSituation extends Situation
	$house: House @part
end


rule "mosquitoFlying"
	when
		mosquito: Mosquito()
		house: House() from mosquito.getHouse()
		not mosquitoFlown (this.migrated==mosquito) over window:time(1d)
	then
		mosquitoFlown eventFlown =new mosquitoFlown();
		eventFlown.setMigrated(mosquito);
		house.changeMosquito(mosquito);//mosquito chooses another house
		insert(eventFlown);
		update(mosquito);
end

rule "mosquitoLayingEggs"
	when
		mosquito: Mosquito()
		house: House(trap || activefocus) from mosquito.getHouse()
		not MosquitoLayedEggs (this.layed==mosquito) over window:time(1d)
	then
		MosquitoLayedEggs eventLay = new MosquitoLayedEggs();
		eventLay.setLayed(mosquito);
		Eggs neweggs= house.addEggs();//mosquito lay eggs in house
		insert(eventLay);
		insert(neweggs);
		
		EggsHatched eventHatch = new EggsHatched();
		eventHatch.setHatched(neweggs);
		insert(eventHatch);
end


rule "rain"
when 
  not Rain () over window:time(15d)  

then 
        Rain event= new Rain();//return of foci
		insert(event);
end

rule "raining in a house with focus"
	when
		Rain ()
		house: House(focus==true)
	then
		house.setActivefocus(true);//change to active focus
		
end

rule "eggshatching"
	when
		eggs: Eggs()
		house: House(activefocus==true) from eggs.getHouse()
		not EggsHatched (this.hatched==eggs) over window:time(20d)
	then
		Mosquito newmosquito1 = house.addMosq();
		insert(newmosquito1);
		Mosquito newmosquito2 = house.addMosq();
		insert(newmosquito2);
		Mosquito newmosquito3 = house.addMosq();
		insert(newmosquito3);
		Mosquito newmosquito4 = house.addMosq();
		insert(newmosquito4);
		Mosquito newmosquito5 = house.addMosq();
		insert(newmosquito5);
		Mosquito newmosquito6 = house.addMosq();
		insert(newmosquito6);
		Mosquito newmosquito7 = house.addMosq();
		insert(newmosquito7);
		Mosquito newmosquito8 = house.addMosq();
		insert(newmosquito8);
		Mosquito newmosquito9 = house.addMosq();
		insert(newmosquito9);
		Mosquito newmosquito10 = house.addMosq();
		insert(newmosquito10);
		house.removingEggs(eggs);//transform eggs in new mosquitos
end


rule "capturedMosquitoAndCallingAgent"
@role(situation)
@type(capturedMosquitoAndCallingAgent)
	when
		eggs: Eggs()
		house: House(trap==true) from eggs.getHouse()
		EggsHatched(this.hatched==eggs) over window:time(4d)
	then
		SituationHelper.situationDetected(drools);
end


rule "capturedMosquitoSevereSituation"
@role(situation)
@type(capturedMosquitoSevereSituation)
	when
		$house: House()
		$situation: Number(this>3) from accumulate($sit: capturedMosquitoAndCallingAgent (house==$house, active==true), count($sit)) 
	then
		SituationHelper.situationDetected(drools);
end


rule "mosquitoCaptured"
	when
		mosquito: Mosquito()
		$house: House() from mosquito.getHouse()
		$sit: capturedMosquitoAndCallingAgent(house==$house, active==true)
	then
		$house.removeMosquito(mosquito);//captured in trap
		retract(mosquito);
		System.out.println("mosquito captured");
end


rule "AgentWorking"
	when
		$sit: capturedMosquitoAndCallingAgent(house:house, active==false)
	then
		house.newAgent();
		List<Eggs> eggsInHouse = house.getEggs();
		eggsInHouse.clear();
		if(house.getMosquitos().size()>0)
		{
			for(Mosquito m : house.getMosquitos()){
			house.removeMosquito(m);
			retract(m);
			}
			}
		house.setActivefocus(false);
		House houseant = house;
		 for (int visited = 0; visited < 5; visited++) {//visit 5 houses
            List<House> neighborHouse = houseant.getNeighbors();
            Random random = new Random();
            if(neighborHouse.size()>0)
                        {
            int chooseHouse = random.nextInt((neighborHouse.size() - 1 - 0) + 1) + 0;//choose a new house to visit
            
             House newHouse = neighborHouse.get(chooseHouse);
             houseant.removeAgent();
             newHouse.newAgent();
              eggsInHouse = newHouse.getEggs();
              eggsInHouse.clear();//remove mosquitos, eggs and foci
              if(house.getMosquitos().size()>0)
		{
              for(Mosquito m : newHouse.getMosquitos()){
             newHouse.removeMosquito(m);
			retract(m);
			
			}
			}
              newHouse.setActivefocus(false);
                        houseant = newHouse;
                        System.out.println("Visited house "+houseant+" by agent");
        }
        
                        else
                        {
                            visited=5;
                        }
                        }
        houseant.removeAgent();
end
		